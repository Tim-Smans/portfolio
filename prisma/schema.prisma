// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id               String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String  @db.VarChar(255)
  coverImageUrl    String? @default("https://via.assets.so/img.jpg?w=200&h=150&tc=white&bg=#cecece") @db.VarChar(255)
  shortDescription String @db.VarChar(255)
  description      String @db.VarChar(1000)
  projectUrl       String? @db.VarChar(1000)
  tags             Tag[]
  images           Image[]
}

model Tag {
    id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name      String  @db.VarChar(20)
    color     String? @db.VarChar(30) @default("")
    iconName  String? @db.VarChar(30) @default("")
    projects  Project[]
}

model Image {
    id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    url       String  @db.VarChar(300)
    alt       String  @db.VarChar(300)
    projectId String  @db.Uuid
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username  String     @db.VarChar(255)
  email     String     @unique @db.VarChar(255)
  password  String     @db.VarChar(255)
  roleId    String     @db.Uuid
  createdAt DateTime   @default(now()) @db.Timestamp(6)
  updatedAt DateTime   @updatedAt @db.Timestamp(6)
  sessions  Session[]
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Session {
  id          String   @id @unique @db.VarChar
  userId      String   @db.Uuid
  activeFrom  DateTime @default(now())
  activeUntil DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + '1 day'::interval)"))
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    String @id @db.Uuid
  name  String @unique
  users User[]
}

model Skill {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String     @db.VarChar(20)
  description String     @db.VarChar(100)
}